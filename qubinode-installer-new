#!/usr/bin/env bash
# This script will start the automated depoyment of openshift home lab

# Uncomment for debugging
#export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
#set -x

# Turn verbose off
_V=1
PROJECT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source "${PROJECT_DIR}/qubinode_utils.sh"
source "${PROJECT_DIR}/qubinode_cubes.sh"

##       MAIN               ##
##############################

# Exit if this is executed as the root user
if is_root; then
    echo "Error: qubi-installer should be run as a normal user, not as root!"
    exit 1
fi

echo ""
echo ""
OPTIND=1
NUM_ARGS="$#"
ALL_ARGS="$@"

while getopts ":c:dvh:m:p:a:" opt;
do
    case $opt in
        a) check_args;
           full_deploy=true
           ;;
        c) check_args
           check=true
           cluster=true
           cluster_opt=$OPTARG
           ;;
        d) check_args;
           teardown=true
           ;;
        h) display_help
           exit 1
           ;;
        m) check_args;
           maintenance=$OPTARG;
           ;;
        p) check_args
           check=true
           product=true
           product_opt=$OPTARG
           ;;
        v) check_args;
           _V=1
           ;;
       --) shift; break;;
       -*) echo Unrecognized flag : "$1" >&2
           display_help
           exit 1
           ;;
       \?) echo Unrecognized flag : "$1" >&2
           display_help
           exit 1
           ;;
    esac
done
shift "$((OPTIND-1))"

# TODO: add verbose option for default install
if (( $OPTIND == 1 )); then
   cat < docs/default_message
   default_message=("Continue with the default installation" "Display the help menu")
   createmenu "${default_message[@]}"
   result=($(echo "${selected_option}"))
   if [ "A${result}" == "ADisplay" ]
   then
       display_help
   elif [ "A${result}" == "AContinue" ]
   then
       default_install
   else
       echo $result
      echo "Unknown issue, please run the installer again"
   fi
else
    if [ "A${maintenance}" != "A" ]
    then
        # Check for product
        check_for_product_rhsm_pool_id
        if [ "${maintenance}" == "clean" ]
        then
            qubinode_project_cleanup
        elif [ "${maintenance}" == "setup" ]
        then
            qubinode_installer_preflight
        elif [ "${maintenance}" == "rhsm" ]
        then
            qubinode_rhsm_register
        elif [ "${maintenance}" == "ansible" ]
        then
            qubinode_setup_ansible
        elif [ "${maintenance}" == "host" ]
        then
            qubinode_setup_kvm_host
        #elif [ "${maintenance}" == "deploy_dns" ]
        #then
        #    qubinode_vm_manager deploy_dns
        #    qubinode_dns_manager server
        elif [ "${maintenance}" == "deploy_nodes" ]
        then
            qubinode_vm_manager deploy_nodes
        elif [ "${maintenance}" == "undeploy" ]
        then
            #TODO: this should remove all VMs and clean up the project folder
            qubinode_vm_manager undeploy
        else
            display_help
        fi
    elif [ "A${product_opt}" != "A" ]
    then
        if [ "${product_opt}" == "ocp" ]
        then
          qubinode_deploy_openshift
        elif [ "${product_opt}" == "idm" ]
        then
            qubinode_vm_manager deploy_dns
            qubinode_dns_manager server
        else
            display_help
        fi
    elif [ "A${cluster_opt}" != "A" ]
    then
      if [[ ${cluster_opt} ==  "diag" ]]; then
        echo "Perparing to run full Diagnostics"
        MASTER_NODE=$(cat inventory/hosts | grep "master01" | awk '{print $1}')
        ssh -t  -o "StrictHostKeyChecking=no"   $MASTER_NODE "sudo oadm diagnostics"
      fi
     else
         display_help
    fi
fi

exit 0
