- name: deploy all VMs required
  hosts: localhost
  become: yes
  gather_facts: no
  vars_files:
    - vars/all.yml
    - vars/vault.yml
    - vars/idm.yml
    - vars/ocp3.yml
  tasks:
    - name: include additional openshift variables
      include_vars: "vars/{{ openshift_product }}.yml"

    - name: include additional openshift variables
      include_vars: "vars/openshift3_size_{{ openshift_deployment_size }}.yml"

    - name: include create vm tasks
      include_tasks: vms_inc.yml
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: outer_item.name
#      register: _create_vms
#      async: 600
#      poll: 0
      when: outer_item.name != 'dns'

#    - name: wait for vms to be created
#      async_status:
#        jid: "{{ _create_vms }}"
#      register: _jobs
#      until: _jobs.finished
#      delay: 5
#      retries: 10
#      with_items: "{{ _create_vms.results }}"
#      when: _create_vms.results is defined

    - name: Cleanup hosts file
      vars:
        vm_name: "{{ preappend_host_name }}{{ outer_item.name }}"
      lineinfile:
        path: "{{ inventory_dir }}/hosts"
        state: absent
        regexp: "({{ vm_name }})"
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: outer_item.name
      when:
        - outer_item.name != 'dns'
        - vm_teardown

    - name: collect all nodes hostnames and ip address
      vars:
        - hnames: []
        - short_name: "{{ hostvars[item].inventory_hostname_short }}"
        - hostname: "{{ hostvars[item].inventory_hostname }}"
        - host_ip: "{{ hostvars[short_name].ansible_host }}"
      set_fact:
        hnames: "{{ hnames }} + [ '{{ short_name }}' ] + [ '{{ hostname }}' ] + [ '{{ host_ip }}' ]"
      loop: "{{ groups ['qbnodes'] }}"
      loop_control:
        label: "{{ hostvars[item].inventory_hostname }}"
      delegate_to: localhost
      when: vm_teardown|bool and hostvars[short_name]
      become: no

    - name: remove node ssh keys
      command: "/usr/bin/ssh-keygen -R {{ item }}"
      with_items: "{{ hnames }}"
      when: vm_teardown|bool
      become: no

    - name: remove openshift password file
      file:
        state: absent
        path: "{{ htpasswd_file_path }}"
      when: vm_teardown|bool
