- name: create nodes dns records on IDM server
  hosts: qbnodes:!*.{{domain}}
  become: yes
  gather_facts: yes
  vars_files:
    - vars/all.yml
    - vars/vault.yml
    - vars/idm.yml
  environment:
    IPA_HOST: "{{idm_hostname}}.{{ domain }}"
    IPA_USER: "{{ idm_admin_user }}"
    IPA_PASS: "{{ idm_admin_pwd }}"

  tasks:
    - name: include additional openshift variables
      include_vars: "vars/{{ openshift_product }}.yml"

    - name: include additional openshift variables
      include_vars: "vars/openshift3_size_{{ openshift_deployment_size }}.yml"

    - name: set dns record state
      set_fact:
        record_state: "{{ 'absent' if vm_teardown|bool else 'present' }}"

    - name: Create/Delete OpenShift Cluster A Records
      ipa_dnsrecord:
        zone_name: "{{ domain }}"
        record_name: "{{ hostvars[ansible_hostname].inventory_hostname }}"
        record_type: A
        record_value: "{{ hostvars[ansible_hostname].ansible_host }}"
        #record_ttl: 300
        state: "{{ record_state }}"
        validate_certs: no
      delegate_to: localhost

    - name: Create/Delete OpenShift Cluster PTR Records
      ipa_dnsrecord:
        zone_name: "{{ qubinode_ptr }}"
        record_name: "{{ hostvars[ansible_hostname].ansible_host.split('.')[3:4] | join('.') }}"
        record_type: PTR
        #record_ttl: 300
        record_value: "{{ hostvars[ansible_hostname].inventory_hostname }}.{{ domain }}."
        state: "{{ record_state }}"
        validate_certs: no
      delegate_to: localhost


    - name: Generate IPA Session Cookie
      vars:
      uri:
        url: "https://{{ ipa_host }}/ipa/session/login_password"
        validate_certs: no
        method: POST
        status_code: 200
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          Accept: "text/plain"
          Referer: "https://{{ ipa_host }}/ipa"
        body: "user={{ idm_admin_user }}&password={{ idm_admin_pwd }}"
      register: ipa_session
      run_once: true
      delegate_to: localhost
      tags:
        - dns

    - name:  Create Wildcard for Applications
      uri:
        url: "https://{{ ipa_host }}/ipa/session/json"
        validate_certs: no
        method: POST
        status_code: 200
        headers:
          Cookie: "{{ ipa_session.set_cookie }}"
          Accept: "application/json"
          Referer: "https://{{ ipa_host }}/ipa"
        body:
          method: dnsrecord_add
          params:
          - - "{{ domain }}."
            - "{{ dns_wildcard }}"
          - a_part_ip_address: "{{ hostvars[ansible_hostname].ansible_host }}"
            a_extra_create_reverse: false
        body_format: json
      when: ansible_hostname in groups['infra']
      #loop: "{{ groups['infra'] }}"
      #loop_control:
      #  label: "{{ hostvars[ansible_hostname].inventory_hostname }}"
      delegate_to: localhost
      tags:
        - dns

    - name: Delete wildcard domain
      ipa_dnsrecord:
        zone_name: "{{ domain }}"
        record_name: "{{ dns_wildcard }}"
        record_value: "{{ hostvars[ansible_hostname].ansible_host }}"
        state: absent
        validate_certs: no
      delegate_to: localhost
      when: vm_teardown|bool and ansible_hostname in groups['infra']
